<?php

namespace Unit;

use app\core\Application;
use app\core\DbConnection;
use app\model\User\Student;
use Dotenv\Dotenv;
use PHPUnit\Framework\TestCase;

class StudentTest extends TestCase
{
    public static Application $app;
    private static array $student;
    private static $db;
    /*
     * validateUserAttributes
     * insert
     * fetchStuFromDb
     */

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::getStuObjects();

        $dotenv = Dotenv::createImmutable(dirname(__DIR__, 2), '.env.test');
        $dotenv->load();
        $config = [
            'db' => [
                'host' => $_ENV['DB_HOST'],
                'database' => $_ENV['DB_NAME'],
                'user' => $_ENV['DB_USER'],
                'password' => $_ENV['DB_PASS'],
                'port' => $_ENV['DB_PORT'],
            ],
            'mailer' => [
                'host' => $_ENV['SMTP_HOST'],
                'port' => $_ENV['SMTP_PORT'],
                'username' => $_ENV['SMTP_USER'],
                'password' => $_ENV['SMTP_PASS'],
                'from' => $_ENV['SMTP_FROM'],
                'from_name' => $_ENV['SMTP_FROM_NAME'],
                'encryption' => $_ENV['SMTP_SECURE'],
            ]
        ];
        self::$db = DbConnection::getDatabaseInstance($config['db']);
    }

    /**
     * @test
     * @dataProvider studentDataProvider
     */
    public function testValidateUserAttributes($regNo, $firstName, $lastName, $email, $contactNo, $personalEmail,
                                               $indexNo, $degreeProgramCode)
    {
        $this->assertTrue(Student::validateUserAttributes($regNo, $firstName, $lastName, $email, $contactNo,
            $personalEmail, $indexNo, $degreeProgramCode));
    }

    /**
     * @test
     * @dataProvider indexDataProvider
     */
    public function testValidateIndexNo($regNo)
    {
        $this->assertTrue(Student::validateIndexNo($regNo));
    }

    private static function getStuObjects(): void
    {
        foreach (self::studentDataProvider() as $data) {
            $stuData=[
                'regNo' => $data[0],
                'firstName' => $data[1],
                'lastName' => $data[2],
                'email' => $data[3],
                'contactNo' => $data[4],
                'personalEmail' => $data[5],
                'indexNo' => $data[6],
                'degreeProgramCode' => $data[7]
            ];
            self::$student[] = Student::createNewStudent($stuData);
        }
    }

    /**
     * @dataProvider studentDataProvider
     */
    public function testInsert()
    {
        foreach (self::$student as $stu) {
            $password = $stu->insert();
            $this->assertNotEmpty($password);
        }
    }

    /**
     * @test
     * @dataProvider yearDataProvider
     */
    public function testGetBatchYears(array $regNos, array $expected)
    {
        $this->assertEquals($expected, Student::getBatchYears($regNos));
    }

    public static function studentDataProvider(): array
    {
        return [
            ['2020/IS/0075', 'Malsha', 'Kavindi', '2020is0075@fusion.ac.lk', '0782025393', 'malsha.kavi@gmail.com','20200075', 'IS'],
            ['2020/CS/0011', 'Dilanga', 'Harshani', '2020cs0011@fusion.ac.lk', '0772267962', 'aadilanga@gmail.com', '20000011', 'CS'],
            ['2020/CS/0014', 'Inuri', 'Lavanya', '2020cs0014@fusion.ac.lk', '0719267365', 'inurilavanya@gmail.com', '20000014', 'CS'],
            ['2020/CS/0026', 'Ramindu', 'Walgama', '2020cs0016@fusion.ac.lk', '0712028360', 'rrwalgama2@gmail.com', '20000026', 'CS'],
            ['2020/CS/0044', 'Anjana', 'Silva', '2020cs0044@fusion.ac.lk', '0720261354', 'anjana1.silva@gmail.com', '20000044', 'CS'],
            ['2020/IS/0016', 'Ravin', 'Dias', '2020is0016@fusion.ac.lk', '0762349367', 'naravindias2510@gmail.com', '21000016', 'IS'],
            ['2020/IS/0032', 'Aruni', 'Samara', '2020is0032@fusion.ac.lk', '0742934349', 'aruniisamaraa@gmail.com', '21000032', 'IS'],
            ['2020/IS/0051', 'Kavindu', 'Fernando', '2020is0051@fusion.ac.lk', '0752678334', 'fernandok@gmail.com', '21000051', 'IS']
        ];
    }

    public static function indexDataProvider(): array
    {
        return [
            ['20200075'],
            ['20000011'],
            ['20000014'],
            ['20000026'],
            ['20000044'],
            ['21000016'],
            ['21000032'],
            ['21000051']
        ];
    }

    public static function yearDataProvider(): array
    {
        return [
            [
                ['2020/IS/0075', '2021/IS/0076', '2022/IS/0077', '2023/IS/0078'],
                ['2020', '2021', '2022', '2023']
            ],
            [
                ['2018/IS/0050', '2019/IS/0051', '2020/IS/0052', '2018/CS/0053'],
                ['2018', '2019', '2020']
            ],
            [
                ['2020/IS/0035', '2021/IS/0036', '2020/CS/0037', '2021/CS/0038'],
                ['2020', '2021']
            ]
        ];
    }

    /**
     * @test
     * @dataProvider indexRegNoProvider
     */
    public function testGetIndexNoByRegNo(string $regNo, int $expected)
    {
        $this->assertEquals($expected, Student::getIndexNoByRegNo($regNo));
    }

    public static function indexRegNoProvider(): array
    {
        return [
            ['2020/CS/0001', 20200001],
            ['2020/IS/0002', 20200002],
            ['2020/LC/0022', 20200022],
            ['2020/AD/0045', 20200045],
        ];
    }
}